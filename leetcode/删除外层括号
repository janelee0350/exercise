## 有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。
## 例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
## 如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
## 给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
## 对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

class Solution(object):
    def removeOuterParentheses(self, S):
        """
        :type S: str
        :rtype: str
        """
        
        # key: 类似栈，得到一个0，就是一个字符串原语
        
        num = 0
        n = len(S)
        new = ''
        if n == 0:
            return new
        
        for s in S:
            if s == '(':
                num = num+1
                if num-1 != 0:
                    new = new + s
                    
            elif s == ')':
                num = num-1
                if num != 0:
                    new = new + s
                    
        return new
