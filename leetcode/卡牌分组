#给定一副牌，每张牌上都写着一个整数。
#此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1 组或更多组：

#每组都有 X 张牌。组内所有的牌上都写着相同的整数。
#仅当你可选的 X >= 2 时返回 true

#法二利用自己定义的求最大公约数的gcd函数
# 定义最大公约数函数
def gcd(a,b):
  if a>=b:
    return gcd(b,a%b) if a%b else b
    # 如果a恰好整除b，b就是两者的最大公约数；否则，求b与a/b的余数的最大公约数，该数也是a与b的最大公约数（因为 a = a/b*b + 余数）
  else:
    return gcd(a,b%a) if b%a else a

# 法一，不利用特殊函数
class Solution(object):
    def hasGroupsSizeX(self, deck):
        """
        :type deck: List[int]
        :rtype: bool
        """
        # 统计每个数字出现的次数，求这些次数的公约数
        # 注意字典的用法
        
        dict = {}
        
        for d in deck:
            if d not in dict:
                dict[d] = 1
            else:
                dict[d] = dict[d]+1
                
        count = []
        for d in dict:
            count.append(dict[d])
        
        count.sort()
        
        m = len(count)
        
        if count[0]<2:
            return False
        else:
            for j in range(2,count[0]+1):
                for l in range(0,m):
                    if float(count[l])/j != int(count[l]/j):
                        break
                    if l == m-1:
                        return True
        return False 
                        

## 法二：两两利用最大公约数的函数gcd，自己定义gcd
class Solution(object):
    def hasGroupsSizeX(self, deck):
        """
        :type deck: List[int]
        :rtype: bool
        """
        # 统计每个数字出现的次数，求这些次数的公约数
        # 字典？
        
        dict = {}
        
        for d in deck:
            if d not in dict:
                dict[d] = 1
            else:
                dict[d] = dict[d]+1
                
        count = []
        for d in dict:
            count.append(dict[d])
        
        count.sort()
        
        m = len(count)
        
        # 定义最大公约数函数
        def gcd(a,b):
            if a>=b:
                return gcd(b,a%b) if a%b else b
            else:
                return gcd(a,b%a) if b%a else a
        
        if count[0]<2:
            return False
        else:
            for j in range(m-1):
                rf = gcd(count[j],count[j+1])
                if rf == 1:
                    return False
                else:
                    count[j+1] = rf
        
        return True
            
            
            
        
