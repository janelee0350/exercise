##给定一个整数数组和一个整数 k, 你需要在数组里找到不同的 k-diff 数对。这里将 k-diff 数对定义为一个整数对 (i, j), 其中 i 和 j 都是数组中的数字，且两数之差的绝对值是 k.
#示例 1:
#输入: [3, 1, 4, 1, 5], k = 2
#输出: 2
#解释: 数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。
#尽管数组中有两个1，但我们只应返回不同的数对的数量。


## 法二：先排序
class Solution(object):
    def findPairs(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        sum_d = 0
        n  = len(nums)
        a = [float('inf'), float('inf')]
        
        if k < 0:
            return 0
        
        nums.sort()

        for i in range(n-1):
            for j in range(i+1,n):
                if nums[j]-nums[i] == k and [nums[i], nums[j]] != a:
                    sum_d = sum_d+1
                    a = [nums[i], nums[j]]
                    break
                if nums[j]-nums[i]>k:
                    break

        return sum_d


## 法一
class Solution(object):
    def findPairs(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        ## 数据太长时超时了
        sum_d = 0
        n  = len(nums)
        uni = []
        
        if k < 0:
            return 0
        if k == 0:
            for i in range(n):
                if nums[i] not in uni:
                    uni.append(nums[i])
                    if nums[i] in nums[i+1:n]:
                        sum_d = sum_d+1
            return sum_d
        
        for i in range(n):
            if nums[i] not in uni:
                uni.append(nums[i])
                if nums[i]+k in nums[i+1:n] and nums[i]+k not in uni:
                    sum_d = sum_d+1
                if nums[i]-k in nums[i+1:n] and nums[i]-k not in uni:
                    sum_d = sum_d+1
        
        return sum_d
