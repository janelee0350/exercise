##待完善

#给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
#你找到的子数组应是最短的，请输出它的长度。

#示例 1:
#输入: [2, 6, 4, 8, 10, 9, 15]
#输出: 5
#解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序

class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # key 1.从前找到第一个开始减小的值
        #     2.从后找到第一个开始变大的值
        #     3.从剩下的部分中，搜索最小值和最大值
        #     4.找到前面有序部分比最小值大的值，后面有序部分比最大值小的值即可。
        
                
        n = len(nums)
        
        head = 0
        tail = n-1
        
        i = 0
        for i in range(n-1):
            if nums[i]>nums[i+1]:
                break
        head = i+1
        
        for j in range(n):
            if nums[n-j]>nums[n-j+1]:
                break
        tail = j-1
        
        inside = nums[head:tail+1]
        min_in = min(inside)
        max_in = max(inside)
        
        for l in range(0,head):
            if nums[l] > min_in:
                break
        head = l
        
        for k in range(tail+1,n):
            if nums[k]>max_in:
                break
        tail = k
        
        return tail-head+1
