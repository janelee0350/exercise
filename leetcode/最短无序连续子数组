#给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。

#你找到的子数组应是最短的，请输出它的长度。

#示例 1:

#输入: [2, 6, 4, 8, 10, 9, 15]
#输出: 5
#解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。

# 法一：不排序法
class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # key 1.从前找到第一个开始减小的值
        #     2.从后找到第一个开始变大的值
        #     3.从剩下的部分中，搜索最小值和最大值
        #     4.找到前面有序部分比最小值大的值，后面有序部分比最大值小的值即可。
        
        n = len(nums)
        
        if n <= 1:
            return 0
        
        if n == 2:
            if nums[0]<=nums[1]:
                return 0
        
        head = 0
        tail = n-1
        
        for i in range(n-1):
            if nums[i]>nums[i+1]:
                break
        head = i  #开始减小的前一个数的下标
        
        for j in range(1,n):
            jj = n-j  # in (n-1,1)  
            if nums[jj] < nums[jj-1]:
                break
                
        tail = jj
        
        if tail <= head:
            return 0
        
        inside = nums[head:tail+1]
        min_in = min(inside)
        max_in = max(inside)
        
        for l in range(0,head+1):
            if nums[l] > min_in:
                break
        head = l
        
        for k in range(tail+1,n+1):
            kk = n+tail-k  # in (n-1,tail)
            if nums[kk] < max_in:
                break
        tail = kk
        
        return tail-head+1
        
    # 法二：排序法
    
    # 先排序得到新的数组和索引
    # 获取所有当前数组与排序后数组具有不同数值的索引
    # 原数组最右边的索引 - 最左边的 + 1 就是结果
    
    class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums_s = sorted(nums)
        n = len(nums)
        head = n-1
        for i in range(n):
            if nums[i] != nums_s[i]:
                head = i
                break
        if head == n-1 and nums[n-1]==nums_s[n-1]:
            return 0
        
        for i in range(n - 1, head, -1):
            if nums[i] != nums_s[i]:
                return i - head + 1
        
