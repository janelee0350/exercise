
## 本方法超时，但只需利用set存储障碍物的位置，就可以节省不少时间，达到要求（见法二）
## obstacle_set=set()
## for obstacle in obstacles:
##    obstacle_set.add((obstacle[0],obstacle[1]))

class Solution(object):
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        # 转弯不受影响
        # 直行判断有无障碍
        # 注意审题：是到机器人走过的最大距离，而不是结束时的距离
        dirt = 0    #方向，0：y+1; 1:x-1; 2:y-1; 3:x+1
        act = [0,0] 
        max_l = 0
        
        n = len(commands)
        m = len(obstacles)
        
        for i in range(n):
            if commands[i] == -2:
                dirt = dirt + 1
            elif commands[i] == -1:
                dirt = dirt - 1
                
            else:
                dirt = dirt % 4
                flag = 0
                if dirt == 0:
                    for j in range(1,commands[i]+1):
                        if [act[0], act[1]+j] in obstacles:
                            act = [act[0], act[1]+j-1]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0], act[1]+commands[i]]
                    
                if dirt == 1:
                    for j in range(1,commands[i]+1):
                        if [act[0]-j, act[1]] in obstacles:
                            act = [act[0]-j+1, act[1]]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0]-commands[i], act[1]]
                if dirt == 2:
                    for j in range(1,commands[i]+1):
                        if [act[0], act[1]-j] in obstacles:
                            act = [act[0], act[1]-j+1]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0], act[1]-commands[i]]
                if dirt == 3:
                    for j in range(1,commands[i]+1):
                        if [act[0]+j, act[1]] in obstacles:
                            act = [act[0]+j-1, act[1]]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0]+commands[i], act[1]]
                lenl = act[0]*act[0]+act[1]*act[1]
                if lenl > max_l:
                    max_l = lenl
            
        return max_l           
                
                
                
 class Solution(object):
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        # 转弯不受影响
        # 直行判断有无障碍
        # 注意审题：是到机器人走过的最大距离，而不是结束时的距离
        dirt = 0    #方向，0：y+1; 1:x-1; 2:y-1; 3:x+1
        act = [0,0] 
        max_l = 0
        obstacle_set=set()
        for obstacle in obstacles:
            obstacle_set.add((obstacle[0],obstacle[1]))
        
        n = len(commands)
        
        for i in range(n):
            if commands[i] == -2:
                dirt = dirt + 1
            elif commands[i] == -1:
                dirt = dirt - 1
                
            else:
                dirt = dirt % 4
                flag = 0
                if dirt == 0:
                    for j in range(1,commands[i]+1):
                        if (act[0], act[1]+j) in obstacle_set:
                            act = [act[0], act[1]+j-1]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0], act[1]+commands[i]]
                    
                if dirt == 1:
                    for j in range(1,commands[i]+1):
                        if (act[0]-j, act[1]) in obstacle_set:
                            act = [act[0]-j+1, act[1]]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0]-commands[i], act[1]]
                if dirt == 2:
                    for j in range(1,commands[i]+1):
                        if (act[0], act[1]-j) in obstacle_set:
                            act = [act[0], act[1]-j+1]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0], act[1]-commands[i]]
                if dirt == 3:
                    for j in range(1,commands[i]+1):
                        if (act[0]+j, act[1]) in obstacle_set:
                            act = [act[0]+j-1, act[1]]
                            flag = 1
                            break
                    if flag == 0:
                        act = [act[0]+commands[i], act[1]]
                lenl = act[0]*act[0]+act[1]*act[1]
                if lenl > max_l:
                    max_l = lenl
            
        return max_l           
                
