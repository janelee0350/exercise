# 给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。

# 示例 1:
# 输入: [3, 2, 1]
# 输出: 1
# 解释: 第三大的数是 1.

class Solution(object):
    def thirdMax(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # 分别记录前三大的数
        
        n = len(nums)
        
        max1 = float('-inf')
        max2 = float('-inf')
        max3 = float('-inf')
        for i in range(n):
            if nums[i] in [max1,max2,max3]:
                continue
            if nums[i]>max1:
                max3 = max2
                max2 = max1
                max1 = nums[i]
            elif nums[i]>max2:
                max3 = max2
                max2 = nums[i]
            elif nums[i] > max3:
                max3 = nums[i]
        
        if max3 == max2 or max3 == float('-inf'):
            return max1
        
        return max3
