#给定两个字符串 A 和 B, 寻找重复叠加字符串A的最小次数，使得字符串B成为叠加后的字符串A的子串，如果不存在则返回 -1。
#举个例子，A = "abcd"，B = "cdabcdab"。
#答案为 3， 因为 A 重复叠加三遍后为 “abcdabcdabcd”，此时 B 是其子串；A 重复叠加两遍后为"abcdabcd"，B 并不是其子串。

#注意:
#A 与 B 字符串的长度在1和10000区间范围内。


## 法一：key：关键在于终止长度，2*A+B
class Solution(object):
    def repeatedStringMatch(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: int
        """
        if B == '':
            return 1

        na = len(A)
        nb = len(B)
        A1 = ''
        times = nb//na + 3

        
        for i in range(1,times+1):
            if B in A*i:
                return i
        
        return -1
            
        
        


## 自己的做法，速度太慢，因为没找好终止长度
class Solution(object):
    def repeatedStringMatch(self, A, B):
        """
        :type A: str
        :type B: str
        :rtype: int
        """
        # a最多叠加到b长度的二倍或叠加两次，有则有，无则无
        
        if B == '':
            return 1

        na = len(A)
        nb = len(B)
        A1 = ''
        times = (2*nb)//na+1
        times = max(times, 2)

        
        for i in range(1,times+1):
            if B in A*i:
                return i
        
        return -1
            
        
        
